// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// Always after the prisma-client-js generator
generator json {
    provider = "prisma-json-types-generator"
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string

    // https://github.com/prisma/prisma/issues/19415 :
    url       = env("DATABASE_URL_NON_POOLING") // uses connection pooling
    directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Post {
    id            Int                @id @default(autoincrement())
    text          String?            @map("postText")
    /// [QuillData]
    quillData     Json?              @map("postQuill")
    date          DateTime           @db.Date
    values        Value[]
    journal       Journal            @relation(fields: [journalId], references: [id])
    journalId     Int                @map("themeId")
    subscriptions PostSubscription[]

    @@map("Entry")
}

model PostSubscription {
    post   Post   @relation(fields: [postId], references: [id])
    user   User   @relation(fields: [userId], references: [id])
    postId Int    @map("entry_id")
    userId String @map("user_id")

    @@id([postId, userId])
    @@map("EntrySubscription")
}

model Value {
    post        Post   @relation(fields: [postId], references: [id])
    postId      Int    @map("entryId")
    metric      Metric @relation(fields: [metricId], references: [id])
    metricId    String @map("metricKey")
    value       Float
    /// [GenericMetricValue]>
    metricValue Json

    @@id([postId, metricId])
}

model Metric {
    id            String       @id @map("key")
    name          String
    description          String
    values        Value[]
    type          String
    /// [MetricSchema]
    metricSchema  Json
    sortOrder     Int
    journal       Journal      @relation(fields: [journalId], references: [id])
    journalId     Int          @map("themeId")
    metricGroup   MetricGroup? @relation(fields: [metricGroupId], references: [id])
    metricGroupId Int?
}

model MetricGroup {
    id        Int      @id @default(autoincrement())
    sortOrder Int
    name      String
    description      String
    metrics   Metric[]
    journal   Journal  @relation(fields: [journalId], references: [id])
    journalId Int
}

model Journal {
    id            Int                 @id @default(autoincrement())
    name          String
    description   String
    /// [QuillData]
    quill         Json?
    owner         User                @relation(fields: [ownerId], references: [id])
    ownerId       String
    isPublic      Boolean
    readers       Reader[]
    posts         Post[]
    metrics       Metric[]
    subscriptions ThemeSubscription[]
    metricGroups  MetricGroup[]

    @@map("Theme")
}

model ThemeSubscription {
    journal   Journal @relation(fields: [journalId], references: [id])
    user      User    @relation(fields: [userId], references: [id])
    journalId Int     @map("theme_id")
    userId    String  @map("user_id")

    @@id([journalId, userId])
}

model Reader {
    id      Int     @id @default(autoincrement())
    theme   Journal @relation(fields: [themeId], references: [id])
    themeId Int
    email   String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String              @id @default(cuid())
    name              String?
    email             String?             @unique
    emailVerified     DateTime?
    image             String?
    role              String?
    accounts          Account[]
    sessions          Session[]
    Theme             Journal[]
    entrySubscription PostSubscription[]
    themeSubscription ThemeSubscription[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
